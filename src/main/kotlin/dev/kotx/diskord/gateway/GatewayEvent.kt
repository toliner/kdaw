package dev.kotx.diskord.gateway

import dev.kotx.diskord.entity.*
import kotlin.reflect.*

open class GatewayEvent(val entity: KClass<*>) {
    object ApplicationCommandCreate : GatewayEvent(ApplicationCommand::class)
    object ApplicationCommandUpdate : GatewayEvent(ApplicationCommand::class)
    object ApplicationCommandDelete : GatewayEvent(ApplicationCommand::class)

    object ChannelCreate : GatewayEvent(ApplicationCommand::class)
    object ChannelUpdate : GatewayEvent(ApplicationCommand::class)
    object ChannelDelete : GatewayEvent(ApplicationCommand::class)
    object ChannelPinsUpdate : GatewayEvent(ApplicationCommand::class)
    object ThreadCreate : GatewayEvent(ApplicationCommand::class)
    object ThreadUpdate : GatewayEvent(ApplicationCommand::class)
    object ThreadDelete : GatewayEvent(ApplicationCommand::class)
    object ThreadListSync : GatewayEvent(ApplicationCommand::class)
    object ThreadMemberUpdate : GatewayEvent(ApplicationCommand::class)
    object ThreadMembersUpdate : GatewayEvent(ApplicationCommand::class)
    object GuildCreate : GatewayEvent(ApplicationCommand::class)
    object GuildUpdate : GatewayEvent(ApplicationCommand::class)
    object GuildDelete : GatewayEvent(ApplicationCommand::class)
    object GuildBanAdd : GatewayEvent(ApplicationCommand::class)
    object GuildBanRemove : GatewayEvent(ApplicationCommand::class)
    object GuildEmojisUpdate : GatewayEvent(ApplicationCommand::class)
    object GuildIntegrationsUpdate : GatewayEvent(ApplicationCommand::class)
    object GuildMemberAdd : GatewayEvent(ApplicationCommand::class)
    object GuildMemberRemove : GatewayEvent(ApplicationCommand::class)
    object GuildMemberUpdate : GatewayEvent(ApplicationCommand::class)
    object GuildMembersChunk : GatewayEvent(ApplicationCommand::class)
    object GuildRoleCreate : GatewayEvent(ApplicationCommand::class)
    object GuildRoleUpdate : GatewayEvent(ApplicationCommand::class)
    object GuildRoleDelete : GatewayEvent(ApplicationCommand::class)
    object IntegrationCreate : GatewayEvent(ApplicationCommand::class)
    object IntegrationUpdate : GatewayEvent(ApplicationCommand::class)
    object IntegrationDelete : GatewayEvent(ApplicationCommand::class)
    object InteractionCreate : GatewayEvent(ApplicationCommand::class)
    object InviteCreate : GatewayEvent(ApplicationCommand::class)
    object InviteDelete : GatewayEvent(ApplicationCommand::class)
    object MessageCreate : GatewayEvent(ApplicationCommand::class)
    object MessageUpdate : GatewayEvent(ApplicationCommand::class)
    object MessageDelete : GatewayEvent(ApplicationCommand::class)
    object MessageDeleteBulk : GatewayEvent(ApplicationCommand::class)
    object MessageReactionAdd : GatewayEvent(ApplicationCommand::class)
    object MessageReactionRemove : GatewayEvent(ApplicationCommand::class)
    object MessageReactionAll : GatewayEvent(ApplicationCommand::class)
    object MessageReactionEmoji : GatewayEvent(ApplicationCommand::class)
    object PresenceUpdate : GatewayEvent(ApplicationCommand::class)
    object TypingStart : GatewayEvent(ApplicationCommand::class)
    object UserUpdate : GatewayEvent(ApplicationCommand::class)
    object VoiceStateUpdate : GatewayEvent(ApplicationCommand::class)
    object VoiceServerUpdate : GatewayEvent(ApplicationCommand::class)
    object WebhooksUpdate : GatewayEvent(ApplicationCommand::class)
}